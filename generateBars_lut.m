function [img lut]= generateBars_lut(orient,freq,speed,contrast,length, position, duration, degPerPix,sizeX,sizeY, frameRate, black, white,sizeLut, backlum)%%% generate images for drifting gratings, without displaying them%%% based (loosely) on DriftDemo from psychtoolbox%%% cmn 11/05/05% DriftDemo shows a drifting grating.% % See also GratingDemo, NoiseDemo, MovieDemo.% 2/21/02 dgp Wrote it, based on FlickerTest.% 4/23/02 dgp HideCursor & ShowCursor.whichScreen=0;%%%set color rangegrey = 0.5*(white+black);if contrast>1    contrast=1;endinc=(white-grey)*contrast;%%% geometry, timingsweepPix = sizeX;pixPerDeg = 1/degPerPix;sweepDeg =  sweepPix / pixPerDeg;duration = sweepDeg/speed;frames = duration*frameRate;  % temporal period, in frames, of the drifting gratingif length>0  %%% short bars    lengthPix = length*pixPerDeg    positionPix = position*pixPerDegend%lutMax = frames*floor((sizeLut-1)/frames)   % save max value for off;%Stryker the line above fails if duration > 256/60 or aboou 3 sec% lutMax = sizeLut;  % maybe should be sizeLut  - 1 (darcy: YES it should)lutMax = sizeLut-1;pixPerLut = sweepPix/lutMax;degPerLut = pixPerLut*degPerPix;wavelength = 1/freq;barWidthLut = round(wavelength /degPerLut);speedLut = speed / degPerLut;lutPerFrame = speedLut/frameRate;[x,y]=meshgrid(1:sizeX,1:sizeY);angle=orient*pi/180;% f= 2*pi/(pixPerDeg*wavelength); % cycles/pixel%Stryker why do we need the line above?a=cos(angle)/pixPerLut;b=sin(angle)/pixPerLut;img = floor(lutMax/2 + a*(x-sizeX/2)+b*(y-sizeY/2));%STryker I think this next code for length is wrongif length>0    d = sin(angle)*(x-sizeX/2) - cos(angle)*(y-sizeY/2);    img(d >= (positionPix+lengthPix/2))=lutMax;    img(d < (positionPix-lengthPix/2))=lutMax;endlut =zeros(sizeLut,3,floor(frames));%Change higcontrast to 0 if you want the old way with background mid-grey%Stryker 2011-03-30lut(:,:,:)=backlum;% if highcontrast > 0%     if contrast >= 0%         lut(:,:,:) = black;%     else%         lut(:,:,:) = white;%     end% else%     lut(:,:,:) = grey;% end%barsize=zeros(1,frames)% for i=1:framesfor i=2:frames    center = round(i*lutPerFrame);    leadingEdge = round(min(lutMax-1,center + 0.5*barWidthLut));    trailingEdge = round(max(1,center - 0.5*barWidthLut));    lut(trailingEdge:leadingEdge,1:3,i)= grey + inc ;      %barsize(i) = leadingEdge - trailingEdge;end%figure%image(img,'CDataMapping', 'scaled');%img(400,:)%barsize(:)